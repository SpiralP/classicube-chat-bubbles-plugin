name: Rust

on: [push]

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  windows:
    name: Build Windows ${{ matrix.config.arch }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - { arch: x86_64, bits: 64, target: x86_64-pc-windows-msvc }
          - { arch: i686, bits: 32, target: i686-pc-windows-msvc }

    steps:
      - uses: actions/checkout@v2

      - name: Install deps
        run: |
          iwr -useb get.scoop.sh -outfile install-scoop.ps1
          .\install-scoop.ps1 -RunAsAdmin
          rm install-scoop.ps1
          echo "$HOME\scoop\shims" >> $env:GITHUB_PATH
          echo "C:\ProgramData\scoop\shims" >> $env:GITHUB_PATH
          scoop install aria2
          scoop install --arch ${{ matrix.config.bits }}bit llvm
          echo "LIBCLANG_PATH=$HOME\scoop\apps\llvm\current\bin" >> $env:GITHUB_ENV

      - name: Install nightly ${{ matrix.config.target }}
        uses: actions-rs/toolchain@v1
        with:
          # we have to use this toolchain because "libclang.dll: invalid DLL (32-bit)"
          toolchain: nightly-${{ matrix.config.target }}
          target: ${{ matrix.config.target }}
          override: true

      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1.1

      - name: Build
        uses: actions-rs/cargo@v1
        if: startsWith(github.ref, 'refs/tags/') != true
        with:
          command: build
          args: --target ${{ matrix.config.target }}

      - name: Test
        uses: actions-rs/cargo@v1
        if: startsWith(github.ref, 'refs/tags/') != true
        with:
          command: test
          args: --target ${{ matrix.config.target }} -- --nocapture --test-threads 1

      - name: Build Release
        uses: actions-rs/cargo@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          command: build
          args: --target ${{ matrix.config.target }} --release

      - name: Rename files
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          Move-Item `
            -Path 'target\${{ matrix.config.target }}\release\classicube_chat_bubbles_plugin.dll' `
            -Destination '.\classicube_chat_bubbles_windows_${{ matrix.config.arch }}.dll'
          Move-Item `
            -Path 'target\${{ matrix.config.target }}\release\classicube_chat_bubbles_plugin.pdb' `
            -Destination 'classicube_chat_bubbles_windows_${{ matrix.config.arch }}.pdb'

      - name: VirusTotal Scan
        uses: crazy-max/ghaction-virustotal@v2
        if: startsWith(github.ref, 'refs/tags/')
        id: virustotal
        with:
          vt_api_key: ${{ secrets.VT_API_KEY }}
          files: |
            classicube_chat_bubbles_windows_${{ matrix.config.arch }}.dll

      - name: Generate Release Body Text
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          node .github\format-release.js '${{ steps.virustotal.outputs.analysis }}' > release_body_text.txt

      - name: Upload Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body_path: release_body_text.txt
          files: |
            classicube_chat_bubbles_windows_${{ matrix.config.arch }}.dll
            classicube_chat_bubbles_windows_${{ matrix.config.arch }}.pdb

  linux:
    name: Build Linux ${{ matrix.config.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - { arch: x86_64, target: x86_64-unknown-linux-gnu }
          - { arch: i686, target: i686-unknown-linux-gnu }

    steps:
      - uses: actions/checkout@v2

      - name: Install x86_64 deps
        if: matrix.config.arch == 'x86_64'
        run: |
          sudo apt-get -y update \
            && sudo apt-get -y install aria2 git gcc g++ build-essential cmake clang-10 pkg-config

      - name: Install i686 deps
        if: matrix.config.arch == 'i686'
        run: |
          sudo dpkg --add-architecture i386 \
            && sudo apt-get -y update \
            && sudo apt-get -y install aria2 git gcc g++ build-essential cmake clang-10 pkg-config:i386 \
              gcc-multilib g++-multilib \
            && echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV

      - name: Install nightly ${{ matrix.config.target }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: ${{ matrix.config.target }}
          override: true

      - name: Build
        uses: actions-rs/cargo@v1
        if: startsWith(github.ref, 'refs/tags/') != true
        with:
          command: build
          args: --target ${{ matrix.config.target }}

      - name: Test
        uses: actions-rs/cargo@v1
        if: startsWith(github.ref, 'refs/tags/') != true
        with:
          command: test
          args: --target ${{ matrix.config.target }} -- --nocapture --test-threads 1

      - name: Build Release
        uses: actions-rs/cargo@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          command: build
          args: --target ${{ matrix.config.target }} --release

      - name: Rename files
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mv 'target/${{ matrix.config.target }}/release/libclassicube_chat_bubbles_plugin.so' \
            './classicube_chat_bubbles_linux_${{ matrix.config.arch }}.so' \
            && file './classicube_chat_bubbles_linux_${{ matrix.config.arch }}.so'

      - name: Upload Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            classicube_chat_bubbles_linux_${{ matrix.config.arch }}.so

  # linux_arm:
  #   name: Build Linux ${{ matrix.config.arch }}
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       config:
  #         - { arch: armhf, target: armv7-unknown-linux-gnueabihf }
  #         - { arch: aarch64, target: aarch64-unknown-linux-gnu }

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Install armhf deps
  #       if: matrix.config.arch == 'armhf'
  #       run: |
  #         docker build -t cross-armhf -f .github/cross-armhf.Dockerfile .

  #     - name: Install aarch64 deps
  #       if: matrix.config.arch == 'aarch64'
  #       run: |
  #         docker build -t cross-aarch64 -f .github/cross-aarch64.Dockerfile .

  #     - name: Install nightly ${{ matrix.config.target }}
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: nightly
  #         target: ${{ matrix.config.target }}
  #         override: true

  #     - name: Build
  #       uses: actions-rs/cargo@v1
  #       if: startsWith(github.ref, 'refs/tags/') != true
  #       with:
  #         use-cross: true
  #         command: build
  #         args: --target ${{ matrix.config.target }}

  #     - name: Build Release
  #       uses: actions-rs/cargo@v1
  #       if: startsWith(github.ref, 'refs/tags/')
  #       with:
  #         use-cross: true
  #         command: build
  #         args: --target ${{ matrix.config.target }} --release

  #     - name: Rename files
  #       if: startsWith(github.ref, 'refs/tags/')
  #       run: |
  #         mv 'target/${{ matrix.config.target }}/release/libclassicube_chat_bubbles_plugin.so' \
  #           './classicube_chat_bubbles_linux_${{ matrix.config.arch }}.so' \
  #           && file './classicube_chat_bubbles_linux_${{ matrix.config.arch }}.so'

  #     - name: Upload Release
  #       uses: softprops/action-gh-release@v1
  #       if: startsWith(github.ref, 'refs/tags/')
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         files: |
  #           classicube_chat_bubbles_linux_${{ matrix.config.arch }}.so

  mac:
    name: Build MacOS ${{ matrix.config.arch }}
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - { arch: x86_64, bits: 64, target: x86_64-apple-darwin }
          # - { arch: i686, bits: 32, target: i686-apple-darwin }

    steps:
      - uses: actions/checkout@v2

      - name: Install deps
        run: |
          brew install aria2 cmake

      - name: Install nightly ${{ matrix.config.target }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: ${{ matrix.config.target }}
          override: true

      - name: Build
        uses: actions-rs/cargo@v1
        if: startsWith(github.ref, 'refs/tags/') != true
        with:
          command: build
          args: --target ${{ matrix.config.target }}

      - name: Test
        uses: actions-rs/cargo@v1
        if: startsWith(github.ref, 'refs/tags/') != true
        with:
          command: test
          args: --target ${{ matrix.config.target }} -- --nocapture --test-threads 1

      - name: Build Release
        uses: actions-rs/cargo@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          command: build
          args: --target ${{ matrix.config.target }} --release

      - name: Rename files
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mv 'target/${{ matrix.config.target }}/release/libclassicube_chat_bubbles_plugin.dylib' \
            './classicube_chat_bubbles_macos_${{ matrix.config.arch }}.dylib' \
            && file './classicube_chat_bubbles_macos_${{ matrix.config.arch }}.dylib'

      - name: Upload Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            classicube_chat_bubbles_macos_${{ matrix.config.arch }}.dylib
